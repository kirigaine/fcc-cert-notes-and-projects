browsers can apply default margin and padding values to specific elements, so 
if you're going for specific looks you need to reset the box value

you can tell box-sizing (and maybe other properties?) to inherit the property from their
parent using `box-sizing: inherit`;

we can also create psuedo-elements with the ::before and ::after selectors.

::before creates one which is the first child of selected element
::after creates one which is the last child of selected element

don't forget float property exists to say which way elements should float!

our selector used in this project is `.key.black--key::after` which doesn't 
follow our standard format from before. Note how this is necessary for these
psuedo-element selectors

content of these psuedo selectors is already empty, but setting `content:""` ensures
the element is rendered while still being empty

setting our <img> element position to absolute with a top of 23px, the parent
element(#piano div) needs to have a position for reference

@media is a media query, which conditionally applies CSS.
Commonly used to apply based on viewport width using max-width and min-width properties

when collapsing our piano below our media query, the keys collapse downward. can be 
disabled using overflow: hidden to hide any element outside the width of .keys

media queries accept logical operators
